// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_tx_qam64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input1,
        input2,
        input3,
        input4,
        input5,
        input6,
        temp1_re500_din,
        temp1_re500_full_n,
        temp1_re500_write,
        temp1_im501_din,
        temp1_im501_full_n,
        temp1_im501_write
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] input1;
input  [0:0] input2;
input  [0:0] input3;
input  [0:0] input4;
input  [0:0] input5;
input  [0:0] input6;
output  [15:0] temp1_re500_din;
input   temp1_re500_full_n;
output   temp1_re500_write;
output  [15:0] temp1_im501_din;
input   temp1_im501_full_n;
output   temp1_im501_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg temp1_re500_write;
reg temp1_im501_write;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] mapping_1_address0;
reg    mapping_1_ce0;
wire   [3:0] mapping_1_q0;
wire   [2:0] mapping_1_address1;
reg    mapping_1_ce1;
wire   [3:0] mapping_1_q1;
reg    temp1_re500_blk_n;
wire    ap_CS_fsm_state18;
reg    temp1_im501_blk_n;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_161_p1;
reg   [63:0] conv_reg_713;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_164_p1;
reg   [63:0] conv1_reg_718;
wire   [63:0] grp_fu_151_p2;
reg   [63:0] d_reg_723;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_156_p2;
reg   [63:0] d_2_reg_728;
wire   [15:0] select_ln560_fu_442_p3;
reg   [15:0] select_ln560_reg_733;
wire    ap_CS_fsm_state17;
wire   [15:0] select_ln560_2_fu_685_p3;
reg   [15:0] select_ln560_2_reg_738;
wire   [63:0] zext_ln70_fu_187_p1;
wire   [63:0] zext_ln71_fu_192_p1;
reg    ap_block_state18;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_161_p0;
wire  signed [31:0] grp_fu_164_p0;
wire   [2:0] index_i_fu_167_p4;
wire   [2:0] index_q_fu_177_p4;
wire   [63:0] ireg_fu_207_p1;
wire   [10:0] exp_tmp_fu_222_p4;
wire   [51:0] trunc_ln554_fu_236_p1;
wire   [52:0] p_Result_4_fu_240_p3;
wire   [53:0] zext_ln558_fu_248_p1;
wire   [0:0] p_Result_s_fu_214_p3;
wire   [53:0] man_V_6_fu_252_p2;
wire   [62:0] trunc_ln544_fu_210_p1;
wire   [11:0] zext_ln455_fu_232_p1;
wire   [11:0] F2_fu_272_p2;
wire   [0:0] icmp_ln570_fu_278_p2;
wire   [11:0] add_ln570_fu_284_p2;
wire   [11:0] sub_ln570_fu_290_p2;
wire  signed [11:0] sh_amt_fu_296_p3;
wire   [53:0] man_V_7_fu_258_p3;
wire  signed [31:0] sext_ln570_fu_304_p1;
wire   [53:0] zext_ln575_fu_324_p1;
wire   [53:0] ashr_ln575_fu_328_p2;
wire   [0:0] tmp_fu_338_p3;
wire   [0:0] icmp_ln574_fu_318_p2;
wire   [15:0] trunc_ln575_fu_334_p1;
wire   [15:0] select_ln574_4_fu_346_p3;
wire   [7:0] tmp_8_fu_362_p4;
wire   [15:0] trunc_ln572_fu_314_p1;
wire   [15:0] sext_ln570cast_fu_378_p1;
wire   [0:0] icmp_ln592_fu_372_p2;
wire   [15:0] shl_ln593_fu_382_p2;
wire   [0:0] icmp_ln560_fu_266_p2;
wire   [0:0] icmp_ln571_fu_308_p2;
wire   [0:0] xor_ln560_fu_396_p2;
wire   [0:0] and_ln571_fu_402_p2;
wire   [15:0] select_ln592_fu_388_p3;
wire   [0:0] or_ln571_fu_416_p2;
wire   [0:0] xor_ln571_fu_422_p2;
wire   [0:0] and_ln570_fu_428_p2;
wire   [15:0] select_ln574_fu_354_p3;
wire   [15:0] select_ln571_fu_408_p3;
wire   [15:0] select_ln570_fu_434_p3;
wire   [63:0] ireg_2_fu_450_p1;
wire   [10:0] exp_tmp_2_fu_465_p4;
wire   [51:0] trunc_ln554_2_fu_479_p1;
wire   [52:0] p_Result_6_fu_483_p3;
wire   [53:0] zext_ln558_2_fu_491_p1;
wire   [0:0] p_Result_5_fu_457_p3;
wire   [53:0] man_V_9_fu_495_p2;
wire   [62:0] trunc_ln544_2_fu_453_p1;
wire   [11:0] zext_ln455_2_fu_475_p1;
wire   [11:0] F2_2_fu_515_p2;
wire   [0:0] icmp_ln570_2_fu_521_p2;
wire   [11:0] add_ln570_2_fu_527_p2;
wire   [11:0] sub_ln570_2_fu_533_p2;
wire  signed [11:0] sh_amt_2_fu_539_p3;
wire   [53:0] man_V_10_fu_501_p3;
wire  signed [31:0] sext_ln570_2_fu_547_p1;
wire   [53:0] zext_ln575_2_fu_567_p1;
wire   [53:0] ashr_ln575_2_fu_571_p2;
wire   [0:0] tmp_10_fu_581_p3;
wire   [0:0] icmp_ln574_2_fu_561_p2;
wire   [15:0] trunc_ln575_2_fu_577_p1;
wire   [15:0] select_ln574_5_fu_589_p3;
wire   [7:0] tmp_11_fu_605_p4;
wire   [15:0] trunc_ln572_2_fu_557_p1;
wire   [15:0] sext_ln570_2cast_fu_621_p1;
wire   [0:0] icmp_ln592_2_fu_615_p2;
wire   [15:0] shl_ln593_2_fu_625_p2;
wire   [0:0] icmp_ln560_2_fu_509_p2;
wire   [0:0] icmp_ln571_2_fu_551_p2;
wire   [0:0] xor_ln560_2_fu_639_p2;
wire   [0:0] and_ln571_2_fu_645_p2;
wire   [15:0] select_ln592_2_fu_631_p3;
wire   [0:0] or_ln571_2_fu_659_p2;
wire   [0:0] xor_ln571_2_fu_665_p2;
wire   [0:0] and_ln570_2_fu_671_p2;
wire   [15:0] select_ln574_2_fu_597_p3;
wire   [15:0] select_ln571_2_fu_651_p3;
wire   [15:0] select_ln570_4_fu_677_p3;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

top_tx_qam64_mapping_1_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
mapping_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapping_1_address0),
    .ce0(mapping_1_ce0),
    .q0(mapping_1_q0),
    .address1(mapping_1_address1),
    .ce1(mapping_1_ce1),
    .q1(mapping_1_q1)
);

top_tx_ddiv_64ns_64ns_64_13_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_13_no_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_713),
    .din1(64'd4618982683775996516),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

top_tx_ddiv_64ns_64ns_64_13_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_13_no_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_reg_718),
    .din1(64'd4618982683775996516),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

top_tx_sitodp_32s_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_2_no_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .ce(1'b1),
    .dout(grp_fu_161_p1)
);

top_tx_sitodp_32s_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_2_no_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .ce(1'b1),
    .dout(grp_fu_164_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv1_reg_718 <= grp_fu_164_p1;
        conv_reg_713 <= grp_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        d_2_reg_728 <= grp_fu_156_p2;
        d_reg_723 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        select_ln560_2_reg_738 <= select_ln560_2_fu_685_p3;
        select_ln560_reg_733 <= select_ln560_fu_442_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if (((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0))) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mapping_1_ce0 = 1'b1;
    end else begin
        mapping_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mapping_1_ce1 = 1'b1;
    end else begin
        mapping_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_im501_blk_n = temp1_im501_full_n;
    end else begin
        temp1_im501_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        temp1_im501_write = 1'b1;
    end else begin
        temp1_im501_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_re500_blk_n = temp1_re500_full_n;
    end else begin
        temp1_re500_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        temp1_re500_write = 1'b1;
    end else begin
        temp1_re500_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_2_fu_515_p2 = (12'd1075 - zext_ln455_2_fu_475_p1);

assign F2_fu_272_p2 = (12'd1075 - zext_ln455_fu_232_p1);

assign add_ln570_2_fu_527_p2 = ($signed(F2_2_fu_515_p2) + $signed(12'd4082));

assign add_ln570_fu_284_p2 = ($signed(F2_fu_272_p2) + $signed(12'd4082));

assign and_ln570_2_fu_671_p2 = (xor_ln571_2_fu_665_p2 & icmp_ln570_2_fu_521_p2);

assign and_ln570_fu_428_p2 = (xor_ln571_fu_422_p2 & icmp_ln570_fu_278_p2);

assign and_ln571_2_fu_645_p2 = (xor_ln560_2_fu_639_p2 & icmp_ln571_2_fu_551_p2);

assign and_ln571_fu_402_p2 = (xor_ln560_fu_396_p2 & icmp_ln571_fu_308_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state18 = ((temp1_im501_full_n == 1'b0) | (temp1_re500_full_n == 1'b0));
end

assign ashr_ln575_2_fu_571_p2 = $signed(man_V_10_fu_501_p3) >>> zext_ln575_2_fu_567_p1;

assign ashr_ln575_fu_328_p2 = $signed(man_V_7_fu_258_p3) >>> zext_ln575_fu_324_p1;

assign exp_tmp_2_fu_465_p4 = {{ireg_2_fu_450_p1[62:52]}};

assign exp_tmp_fu_222_p4 = {{ireg_fu_207_p1[62:52]}};

assign grp_fu_161_p0 = $signed(mapping_1_q1);

assign grp_fu_164_p0 = $signed(mapping_1_q0);

assign icmp_ln560_2_fu_509_p2 = ((trunc_ln544_2_fu_453_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_266_p2 = ((trunc_ln544_fu_210_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln570_2_fu_521_p2 = (($signed(F2_2_fu_515_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_278_p2 = (($signed(F2_fu_272_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln571_2_fu_551_p2 = ((F2_2_fu_515_p2 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_308_p2 = ((F2_fu_272_p2 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln574_2_fu_561_p2 = ((sh_amt_2_fu_539_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln574_fu_318_p2 = ((sh_amt_fu_296_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln592_2_fu_615_p2 = ((tmp_11_fu_605_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_372_p2 = ((tmp_8_fu_362_p4 == 8'd0) ? 1'b1 : 1'b0);

assign index_i_fu_167_p4 = {{{input6}, {input5}}, {input4}};

assign index_q_fu_177_p4 = {{{input3}, {input2}}, {input1}};

assign ireg_2_fu_450_p1 = d_2_reg_728;

assign ireg_fu_207_p1 = d_reg_723;

assign man_V_10_fu_501_p3 = ((p_Result_5_fu_457_p3[0:0] == 1'b1) ? man_V_9_fu_495_p2 : zext_ln558_2_fu_491_p1);

assign man_V_6_fu_252_p2 = (54'd0 - zext_ln558_fu_248_p1);

assign man_V_7_fu_258_p3 = ((p_Result_s_fu_214_p3[0:0] == 1'b1) ? man_V_6_fu_252_p2 : zext_ln558_fu_248_p1);

assign man_V_9_fu_495_p2 = (54'd0 - zext_ln558_2_fu_491_p1);

assign mapping_1_address0 = zext_ln71_fu_192_p1;

assign mapping_1_address1 = zext_ln70_fu_187_p1;

assign or_ln571_2_fu_659_p2 = (icmp_ln571_2_fu_551_p2 | icmp_ln560_2_fu_509_p2);

assign or_ln571_fu_416_p2 = (icmp_ln571_fu_308_p2 | icmp_ln560_fu_266_p2);

assign p_Result_4_fu_240_p3 = {{1'd1}, {trunc_ln554_fu_236_p1}};

assign p_Result_5_fu_457_p3 = ireg_2_fu_450_p1[32'd63];

assign p_Result_6_fu_483_p3 = {{1'd1}, {trunc_ln554_2_fu_479_p1}};

assign p_Result_s_fu_214_p3 = ireg_fu_207_p1[32'd63];

assign select_ln560_2_fu_685_p3 = ((icmp_ln560_2_fu_509_p2[0:0] == 1'b1) ? 16'd0 : select_ln570_4_fu_677_p3);

assign select_ln560_fu_442_p3 = ((icmp_ln560_fu_266_p2[0:0] == 1'b1) ? 16'd0 : select_ln570_fu_434_p3);

assign select_ln570_4_fu_677_p3 = ((and_ln570_2_fu_671_p2[0:0] == 1'b1) ? select_ln574_2_fu_597_p3 : select_ln571_2_fu_651_p3);

assign select_ln570_fu_434_p3 = ((and_ln570_fu_428_p2[0:0] == 1'b1) ? select_ln574_fu_354_p3 : select_ln571_fu_408_p3);

assign select_ln571_2_fu_651_p3 = ((and_ln571_2_fu_645_p2[0:0] == 1'b1) ? trunc_ln572_2_fu_557_p1 : select_ln592_2_fu_631_p3);

assign select_ln571_fu_408_p3 = ((and_ln571_fu_402_p2[0:0] == 1'b1) ? trunc_ln572_fu_314_p1 : select_ln592_fu_388_p3);

assign select_ln574_2_fu_597_p3 = ((icmp_ln574_2_fu_561_p2[0:0] == 1'b1) ? trunc_ln575_2_fu_577_p1 : select_ln574_5_fu_589_p3);

assign select_ln574_4_fu_346_p3 = ((tmp_fu_338_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln574_5_fu_589_p3 = ((tmp_10_fu_581_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln574_fu_354_p3 = ((icmp_ln574_fu_318_p2[0:0] == 1'b1) ? trunc_ln575_fu_334_p1 : select_ln574_4_fu_346_p3);

assign select_ln592_2_fu_631_p3 = ((icmp_ln592_2_fu_615_p2[0:0] == 1'b1) ? shl_ln593_2_fu_625_p2 : 16'd0);

assign select_ln592_fu_388_p3 = ((icmp_ln592_fu_372_p2[0:0] == 1'b1) ? shl_ln593_fu_382_p2 : 16'd0);

assign sext_ln570_2_fu_547_p1 = sh_amt_2_fu_539_p3;

assign sext_ln570_2cast_fu_621_p1 = sext_ln570_2_fu_547_p1[15:0];

assign sext_ln570_fu_304_p1 = sh_amt_fu_296_p3;

assign sext_ln570cast_fu_378_p1 = sext_ln570_fu_304_p1[15:0];

assign sh_amt_2_fu_539_p3 = ((icmp_ln570_2_fu_521_p2[0:0] == 1'b1) ? add_ln570_2_fu_527_p2 : sub_ln570_2_fu_533_p2);

assign sh_amt_fu_296_p3 = ((icmp_ln570_fu_278_p2[0:0] == 1'b1) ? add_ln570_fu_284_p2 : sub_ln570_fu_290_p2);

assign shl_ln593_2_fu_625_p2 = trunc_ln572_2_fu_557_p1 << sext_ln570_2cast_fu_621_p1;

assign shl_ln593_fu_382_p2 = trunc_ln572_fu_314_p1 << sext_ln570cast_fu_378_p1;

assign sub_ln570_2_fu_533_p2 = (12'd14 - F2_2_fu_515_p2);

assign sub_ln570_fu_290_p2 = (12'd14 - F2_fu_272_p2);

assign temp1_im501_din = select_ln560_2_reg_738;

assign temp1_re500_din = select_ln560_reg_733;

assign tmp_10_fu_581_p3 = ireg_2_fu_450_p1[32'd63];

assign tmp_11_fu_605_p4 = {{sh_amt_2_fu_539_p3[11:4]}};

assign tmp_8_fu_362_p4 = {{sh_amt_fu_296_p3[11:4]}};

assign tmp_fu_338_p3 = ireg_fu_207_p1[32'd63];

assign trunc_ln544_2_fu_453_p1 = ireg_2_fu_450_p1[62:0];

assign trunc_ln544_fu_210_p1 = ireg_fu_207_p1[62:0];

assign trunc_ln554_2_fu_479_p1 = ireg_2_fu_450_p1[51:0];

assign trunc_ln554_fu_236_p1 = ireg_fu_207_p1[51:0];

assign trunc_ln572_2_fu_557_p1 = man_V_10_fu_501_p3[15:0];

assign trunc_ln572_fu_314_p1 = man_V_7_fu_258_p3[15:0];

assign trunc_ln575_2_fu_577_p1 = ashr_ln575_2_fu_571_p2[15:0];

assign trunc_ln575_fu_334_p1 = ashr_ln575_fu_328_p2[15:0];

assign xor_ln560_2_fu_639_p2 = (icmp_ln560_2_fu_509_p2 ^ 1'd1);

assign xor_ln560_fu_396_p2 = (icmp_ln560_fu_266_p2 ^ 1'd1);

assign xor_ln571_2_fu_665_p2 = (or_ln571_2_fu_659_p2 ^ 1'd1);

assign xor_ln571_fu_422_p2 = (or_ln571_fu_416_p2 ^ 1'd1);

assign zext_ln455_2_fu_475_p1 = exp_tmp_2_fu_465_p4;

assign zext_ln455_fu_232_p1 = exp_tmp_fu_222_p4;

assign zext_ln558_2_fu_491_p1 = p_Result_6_fu_483_p3;

assign zext_ln558_fu_248_p1 = p_Result_4_fu_240_p3;

assign zext_ln575_2_fu_567_p1 = $unsigned(sext_ln570_2_fu_547_p1);

assign zext_ln575_fu_324_p1 = $unsigned(sext_ln570_fu_304_p1);

assign zext_ln70_fu_187_p1 = index_i_fu_167_p4;

assign zext_ln71_fu_192_p1 = index_q_fu_177_p4;

endmodule //top_tx_qam64
